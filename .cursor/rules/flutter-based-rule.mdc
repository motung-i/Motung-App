---
description: 
globs: 
alwaysApply: false
---
# Dart Flutter MVVM Programming Guide

You are a senior Dart programmer with experience in the Flutter framework and a preference for clean programming and MVVM design patterns.

Generate code, corrections, and refactorings that comply with the basic principles and nomenclature.

## Dart General Guidelines

### Basic Principles

- Use English for all code and documentation.
- Always declare the type of each variable and function (parameters and return value).
  - Avoid using any.
  - Create necessary types.
- Don't leave blank lines within a function.
- One export per file.

### Nomenclature

- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use underscores_case for file and directory names.
- Use UPPERCASE for environment variables.
  - Avoid magic numbers and define constants.
- Start each function with a verb.
- Use verbs for boolean variables. Example: isLoading, hasError, canDelete, etc.
- Use complete words instead of abbreviations and correct spelling.
  - Except for standard abbreviations like API, URL, etc.
  - Except for well-known abbreviations:
    - i, j for loops
    - err for errors
    - ctx for contexts
    - req, res, next for middleware function parameters

### Functions

- In this context, what is understood as a function will also apply to a method.
- Write short functions with a single purpose. Less than 20 instructions.
- Name functions with a verb and something else.
  - If it returns a boolean, use isX or hasX, canX, etc.
  - If it doesn't return anything, use executeX or saveX, etc.
- Avoid nesting blocks by:
  - Early checks and returns.
  - Extraction to utility functions.
- Use higher-order functions (map, filter, reduce, etc.) to avoid function nesting.
  - Use arrow functions for simple functions (less than 3 instructions).
  - Use named functions for non-simple functions.
- Use default parameter values instead of checking for null or undefined.
- Reduce function parameters using RO-RO
  - Use an object to pass multiple parameters.
  - Use an object to return results.
  - Declare necessary types for input arguments and output.
- Use a single level of abstraction.

### Data

- Don't abuse primitive types and encapsulate data in composite types.
- Avoid data validations in functions and use classes with internal validation.
- Prefer immutability for data.
  - Use readonly for data that doesn't change.
  - Use as const for literals that don't change.

### Classes

- Follow SOLID principles.
- Prefer composition over inheritance.
- Declare interfaces to define contracts.
- Write small classes with a single purpose.
  - Less than 200 instructions.
  - Less than 10 public methods.
  - Less than 10 properties.

### Exceptions

- Use exceptions to handle errors you don't expect.
- If you catch an exception, it should be to:
  - Fix an expected problem.
  - Add context.
  - Otherwise, use a global handler.

### Testing

- Follow the Arrange-Act-Assert convention for tests.
- Name test variables clearly.
  - Follow the convention: inputX, mockX, actualX, expectedX, etc.
- Write unit tests for each public function.
  - Use test doubles to simulate dependencies.
    - Except for third-party dependencies that are not expensive to execute.
- Write acceptance tests for each module.
  - Follow the Given-When-Then convention.

## Specific to Flutter MVVM

### Basic Principles

- Use MVVM architecture pattern
  - **Model**: Data classes, entities, and business objects
  - **View**: UI widgets and screens
  - **ViewModel**: Business logic and state management
- Use repository pattern for data persistence
  - see cache if you need to cache data
- Use ViewModel pattern for business logic with state management
- Use Provider, Riverpod, or BLoC to manage state in ViewModels
  - see keepAlive if you need to keep the state alive
- Use freezed to manage UI states and models
- ViewModel always takes user actions as input and updates the observable state that reflects in the View
- Use getIt to manage dependencies
  - Use singleton for services and repositories
  - Use factory for ViewModels when needed
  - Use lazy singleton for long-lived ViewModels
- Use AutoRoute to manage routes
  - Use extras to pass data between pages
- Use extensions to manage reusable code
- Use ThemeData to manage themes
- Use AppLocalizations to manage translations
- Use constants to manage constant values

### MVVM Structure

#### Model Layer
- Define data classes using freezed
- Include data validation in model classes
- Use sealed classes for representing different states
- Keep models immutable
- Example naming: `UserModel`, `ProductModel`, `ApiResponse`

#### View Layer
- Keep Views (Widgets) as dumb as possible
- Views should only:
  - Display UI elements
  - Handle user interactions by calling ViewModel methods
  - Observe ViewModel state changes
- Use Consumer/Selector patterns for state observation
- Break down complex views into smaller, reusable widgets
- Example naming: `HomeView`, `UserProfileView`, `ProductListView`

#### ViewModel Layer
- Handle all business logic
- Manage UI state
- Coordinate with repositories and services
- Transform data for UI consumption
- Handle user actions and update state accordingly
- Use dependency injection for repositories and services
- Example naming: `HomeViewModel`, `UserProfileViewModel`, `ProductListViewModel`

### State Management in MVVM

- ViewModels should extend ChangeNotifier (Provider) or use StateNotifier (Riverpod)
- Use observable properties for UI state
- Implement loading, error, and success states
- Use streams for real-time data updates
- Avoid direct widget-to-widget communication; use ViewModel as mediator

### Widget Structure Guidelines

- When a widget tree becomes too deep, it can lead to longer build times and increased memory usage. Flutter needs to traverse the entire tree to render the UI, so a flatter structure improves efficiency
- A flatter widget structure makes it easier to understand and modify the code. Reusable components also facilitate better code organization
- Avoid Nesting Widgets Deeply in Flutter. Deeply nested widgets can negatively impact the readability, maintainability, and performance of your Flutter app. Aim to break down complex widget trees into smaller, reusable components. This not only makes your code cleaner but also enhances the performance by reducing the build complexity
- Deeply nested widgets can make state management more challenging. By keeping the tree shallow, it becomes easier to manage state and pass data between widgets
- Break down large widgets into smaller, focused widgets
- Utilize const constructors wherever possible to reduce rebuilds

### Dependency Injection

- Register Models as transient (new instance each time)
- Register ViewModels as scoped (per navigation/page lifecycle)
- Register Repositories and Services as singletons
- Use interfaces for all dependencies to improve testability

### Data Flow in MVVM

1. **User Interaction**: User interacts with View
2. **Action Trigger**: View calls ViewModel method
3. **Business Logic**: ViewModel processes the action
4. **Data Access**: ViewModel calls Repository/Service if needed
5. **State Update**: ViewModel updates its observable state
6. **UI Update**: View observes state change and rebuilds UI

### Testing

- Use the standard widget testing for flutter Views
- Write unit tests for each ViewModel method
- Mock repositories and services in ViewModel tests
- Write integration tests for complete MVVM flows
- Test Model classes for data validation and serialization
- Use integration tests for each API module

### File Organization

```
lib/
├── models/
│   ├── user_model.dart
│   └── product_model.dart
├── views/
│   ├── home/
│   │   ├── home_view.dart
│   │   └── widgets/
│   └── profile/
│       └── profile_view.dart
├── viewmodels/
│   ├── home_viewmodel.dart
│   └── profile_viewmodel.dart
├── repositories/
│   └── user_repository.dart
├── services/
│   └── api_service.dart
└── utils/
    └── constants.dart
```